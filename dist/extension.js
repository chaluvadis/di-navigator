"use strict";var Te=Object.create;var O=Object.defineProperty;var we=Object.getOwnPropertyDescriptor;var xe=Object.getOwnPropertyNames;var Ne=Object.getPrototypeOf,Pe=Object.prototype.hasOwnProperty;var je=(i,e)=>{for(var t in e)O(i,t,{get:e[t],enumerable:!0})},Y=(i,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of xe(e))!Pe.call(i,r)&&r!==t&&O(i,r,{get:()=>e[r],enumerable:!(n=we(e,r))||n.enumerable});return i};var De=(i,e,t)=>(t=i!=null?Te(Ne(i)):{},Y(e||!i||!i.__esModule?O(t,"default",{value:i,enumerable:!0}):t,i)),_e=i=>Y(O({},"__esModule",{value:!0}),i);var $e={};je($e,{activate:()=>Ae,deactivate:()=>Me,detectNetWorkspace:()=>ye});module.exports=_e($e);var w=require("vscode");var S=require("vscode");var x=require("vscode"),b=De(require("path"));var X=require("child_process"),H=require("fs");var z="di-navigator.selectProject",B="di-navigator.clearProjectSelection",Z="di-navigator.refreshServices",A="di-navigator.goToImplementation",M="di-navigator.goToInjectionSite",F="diNavigator.selectedProject",ee=["**/*.sln","**/*.slnx","**/*.csproj"],te="No .sln or .csproj files found in workspace.",ie="Project selection cleared - scanning entire workspace.",oe="DI Services refreshed",re="No implementation found for this service.";var ne="Go to Implementation",se="Go to Injection Site",ce="diNavigator:validWorkspace",R=["**/bin/**","**/obj/**","**/Properties/**"],D=["**/*.csproj","**/*.sln","**/*.slnx","**/*.cs"],$="diNavigator",G="excludeFolders";var ae="folder",le="symbol-class",U="warning",pe="symbol-method",W=["Singleton","Scoped","Transient"];var fe="Singleton",me="Scoped";var ge=i=>i.includes(fe)?"Singleton":i.includes(me)?"Scoped":"Transient";var de=(i,e)=>{let t=[];try{let n="./tools/roslyn-di-analyzer/bin/Debug/net8.0/roslyn-di-analyzer.dll";if((0,H.existsSync)(n)){let r=`dotnet "${n}" --file "${i}"`,p=(0,X.execSync)(r,{encoding:"utf8"}),l=JSON.parse(p);for(let g of l.Registrations){let d=ge(g.MethodCall);t.push({lifetime:d,serviceType:g.ServiceType,implementationType:g.ImplementationType,name:void 0,filePath:g.FilePath,lineNumber:g.LineNumber,methodCall:g.MethodCall})}}else{console.warn("Roslyn tool not built, falling back to regex.");let r=e??"";r||(r=require("fs").readFileSync(i,"utf8"));let p=/services\.(Add(?:Singleton|Scoped|Transient))\s*<([^>]+)>(?:\s*,\s*([^>]+))?\s*\(\s*(new\s+[^)]+)?\s*\)/g,l;for(;(l=p.exec(r))!==null;){let g=l[1],d=ge(g),T=l[2].trim(),c=l[3]?l[3].trim():T,m=r.substring(0,l.index).split(`
`).length;t.push({lifetime:d,serviceType:T,implementationType:c,name:void 0,filePath:i,lineNumber:m,methodCall:g})}}}catch(n){console.error("Error running Roslyn tool:",n)}return t},ue=(i,e)=>{let t=[];try{let n="./tools/roslyn-di-analyzer/bin/Debug/net8.0/roslyn-di-analyzer.dll";if((0,H.existsSync)(n)){let r=`dotnet "${n}" --file "${i}"`,p=(0,X.execSync)(r,{encoding:"utf8"}),l=JSON.parse(p);for(let g of l.InjectionSites)t.push({filePath:g.FilePath,lineNumber:g.LineNumber,className:g.ClassName,memberName:g.MemberName,type:g.Type,serviceType:g.ServiceType})}else{console.warn("Roslyn tool not built, falling back to regex.");let r=e??"";r||(r=require("fs").readFileSync(i,"utf8"));let p=/public\s+([\w\.]+)\s*\(\s*([\w<>\.]+)\s+([\w]+)(?:\s*,\s*([\w<>\.]+)\s+([\w]+))*\s*\)/g,l;for(;(l=p.exec(r))!==null;){let T=l[1],c=l[2],m=l[3],a=r.substring(0,l.index).split(`
`).length+1;t.push({filePath:i,lineNumber:a,className:T,memberName:m,type:"constructor",serviceType:c})}let g=/private\s+(readonly\s+)?([\w<>\.]+)\s+([\w_]+);/g,d;for(;(d=g.exec(r))!==null;){let T=d[2],c=d[3],m=r.substring(0,d.index).match(/public\s+class\s+([\w]+)/),a=m?m[1]:"",E=r.substring(0,d.index).split(`
`).length+1;t.push({filePath:i,lineNumber:E,className:a,memberName:c,type:"field",serviceType:T})}}}catch(n){console.error("Error running Roslyn tool for injection sites:",n)}return t};var K=class{projectDI=[];allServices=[];cache=new Map;context;dirty=!1;setContext(e){this.context=e}getExcludeGlob(){let t=x.workspace.getConfiguration($).get(G)??Array.from(R);return t.length>1?`{${t.join(",")}}`:t[0]}clearState(){this.context&&this.context.globalState.update(F,void 0),this.projectDI=[],this.allServices=[],this.dirty=!1,this.cache.clear()}async parseFile(e){let n=(await x.workspace.openTextDocument(e)).getText(),r=de(e,n),p=ue(e,n);return{registrations:r,injectionSites:p}}async collectRegistrations(e){if(!this.context){console.error("Extension context not set. Cannot access global state.");return}let t=this.getExcludeGlob(),n=[];try{let d=await x.workspace.findFiles("**/*.csproj",t),T=await x.workspace.findFiles("**/*.sln",t),c=[...d,...T];new Set(c.map(a=>b.dirname(a.fsPath))).forEach(a=>n.push(a))}catch(d){console.error("Error finding projects:",d)}n.length===0&&x.workspace.workspaceFolders&&x.workspace.workspaceFolders.length>0&&n.push(x.workspace.workspaceFolders[0].uri.fsPath);let r=[],p=0,l=0,g=0;for(let d of n){let T=x.Uri.file(d),c=b.basename(d),m=new x.RelativePattern(T,"**/*.cs"),a;try{a=await x.workspace.findFiles(m,t)}catch(s){console.error(`Error finding files in ${d}:`,s);continue}e?.report({increment:0,message:`Scanning ${a.length} C# files in project ${c}`}),console.log(`Scanning ${a.length} C# files in project ${c}`);let E=[],v=[],h=0,y=0,k=0;for(let s of a){h++,p++;try{let u=await this.parseFile(s.fsPath),f=u.registrations,I=u.injectionSites;e?.report({message:`Parsed ${b.basename(s.fsPath)}: ${f.length} registrations, ${I.length} sites`}),console.log(`Parsed ${s.fsPath} with JS parser: ${f.length} registrations, ${I.length} sites`),y+=f.length,l+=f.length,E.push(...f),k+=I.length,g+=I.length,v.push(...I),f.length>0&&console.log(`Found ${f.length} registrations in ${s.fsPath}`),I.length>0&&console.log(`Found ${I.length} injection sites in ${s.fsPath}`)}catch(u){console.error(`Error parsing ${s.fsPath}:`,u)}}if(console.log(`Project ${c}: ${h} files, ${y} registrations, ${k} sites`),y===0){console.warn(`No DI registrations found in project ${c}.`);continue}let N=new Map;for(let s of E){let u=N.get(s.serviceType);u||(u={name:s.serviceType,registrations:[],hasConflicts:!1,conflicts:[],injectionSites:[]},N.set(s.serviceType,u)),u.registrations.push(s)}for(let s of v){let u=Array.from(N.values()).find(f=>f.name===s.serviceType);u&&u.injectionSites.push(s)}for(let s of N.values()){let u=new Map;for(let f of s.registrations){u.has(f.lifetime)||u.set(f.lifetime,new Map);let I=u.get(f.lifetime);I.has(f.implementationType)||I.set(f.implementationType,[]),I.get(f.implementationType).push(f)}for(let[f,I]of u){for(let[j,Q]of I)if(Q.length>1){let Ce={type:"DuplicateImplementation",details:`Multiple registrations for ${j} as ${f}: ${Q.map(V=>`${V.filePath}:${V.lineNumber}`).join(", ")}`};s.conflicts.push(Ce),s.hasConflicts=!0}if(I.size>1){let j={type:"MultipleImplementations",details:`Multiple different implementations for ${s.name} as ${f}: ${Array.from(I.keys()).join(", ")}`};s.conflicts.push(j),s.hasConflicts=!0}}if(s.registrations.length>0&&s.injectionSites.length===0){let f={type:"UnusedService",details:`Service ${s.name} has registrations but no injection sites found. May be unused.`};s.conflicts.push(f)}}let _=[];for(let s of W){let u=[];for(let f of Array.from(N.values())){let I=f.registrations.filter(j=>j.lifetime===s);if(I.length>0){let j={...f,registrations:I,hasConflicts:f.hasConflicts};u.push(j)}}u.length>0&&_.push({lifetime:s,services:u,color:this.getLifetimeColor(s)})}r.push({projectPath:d,projectName:c,serviceGroups:_})}this.projectDI=r,e?.report({increment:100,message:`Scan complete: ${r.length} projects, ${l} registrations`}),console.log(`Total projects scanned: ${r.length}, Total registrations: ${l}, Total injection sites: ${g}`),r.length===0&&console.warn("No .NET projects found in workspace."),this.cache.set("default",this.projectDI),this.allServices=[];for(let d of r)for(let T of d.serviceGroups)this.allServices.push(...T.services)}getLifetimeColor(e){switch(e){case"Singleton":return"#FF5722";case"Scoped":return"#2196F3";case"Transient":return"#4CAF50";default:return"#9E9E9E"}}getProjectDI(){return this.projectDI}invalidateFile(e){this.dirty=!0,this.cache.clear(),this.allServices=[],console.log(`Invalidated cache due to change in ${e}`)}getServiceGroups(){if(this.projectDI.length===0){let e=[];for(let t of W){let n=this.allServices.filter(r=>r.registrations.some(p=>p.lifetime===t)).length;n>0&&e.push({lifetime:t,services:[],color:this.getLifetimeColor(t),count:n})}return e}else{let e=[];for(let t of this.projectDI)for(let n of t.serviceGroups)e.push({...n,count:n.services.length});return e}}getServicesForLifetime(e){return this.allServices.filter(t=>t.registrations.some(n=>n.lifetime===e))}buildGraphAndConflicts(e){for(let t of e.values())t.registrations.length>0&&t.injectionSites.length===0&&(t.hasConflicts=!0,t.conflicts||(t.conflicts=[]),t.conflicts.push({type:"Unused",details:`Service ${t.name} has registrations but no injection sites.`}))}getAllServices(){return this.allServices}async refresh(){if(!this.dirty&&this.context){let t=this.context.workspaceState.get("diCache");if(t&&Date.now()-t.timestamp<300*1e3){this.projectDI=t.data,this.allServices=[];for(let n of this.projectDI)for(let r of n.serviceGroups)this.allServices.push(...r.services);return}}await this.collectRegistrations(),this.context&&this.context.workspaceState.update("diCache",{data:this.projectDI,timestamp:Date.now()}),this.dirty=!1}},C=new K;var Fe=i=>i.map(e=>({type:e.type,details:e.details})),he=i=>i?.projectPath!==void 0&&Array.isArray(i.serviceGroups),Se=i=>i?.lifetime!==void 0&&Array.isArray(i.services),Re=i=>i?.filePath!==void 0&&i.lineNumber!==void 0,ve=i=>i?.name!==void 0&&Array.isArray(i.registrations),be=i=>i?.type!==void 0&&i?.details!==void 0,J=class{_onDidChangeTreeData=new S.EventEmitter;onDidChangeTreeData=this._onDidChangeTreeData.event;getTreeItem(e){if(he(e)){let t=new S.TreeItem(e.projectName,S.TreeItemCollapsibleState.Collapsed),n=0;return e.serviceGroups.forEach(r=>n+=r.services.length),t.description=`${e.serviceGroups.length} lifetimes, ${n} services`,t.iconPath=new S.ThemeIcon("file-directory"),t.tooltip=e.projectPath,t}else if(Se(e)){let t=new S.TreeItem(e.lifetime,S.TreeItemCollapsibleState.Collapsed);return t.description=`${e.services.length} services`,t.iconPath=new S.ThemeIcon(ae),t.resourceUri=void 0,t}else if(ve(e)){let t=new S.TreeItem(e.name,S.TreeItemCollapsibleState.Collapsed);return t.description=`${e.registrations.length} registrations${e.injectionSites?.length?`, ${e.injectionSites.length} injection sites`:""}${e.hasConflicts?`, ${e.conflicts?.length||0} conflicts`:""}`,t.iconPath=new S.ThemeIcon(le),e.hasConflicts&&(t.iconPath=new S.ThemeIcon(U)),t.command={command:A,title:ne,arguments:[e]},t}else if(Re(e)){let t=new S.TreeItem(`${e.className}.${e.memberName} (${e.serviceType})`,S.TreeItemCollapsibleState.None);return t.description=`Line ${e.lineNumber}`,t.iconPath=new S.ThemeIcon(pe),t.command={command:M,title:se,arguments:[e]},t}else if(be(e)){let t=new S.TreeItem(`${e.type}`,S.TreeItemCollapsibleState.None);return t.description=e.details,t.iconPath=new S.ThemeIcon(U),t.tooltip=e.details,t}return e}getChildren(e){if(e){if(he(e))return e.serviceGroups;if(Se(e))return e.services;if(ve(e)){let t=[...e.injectionSites||[]];return e.hasConflicts&&e.conflicts&&e.conflicts.length>0&&t.push(...Fe(e.conflicts)),t}else return[]}else return C.getProjectDI()}async refresh(){await C.refresh(),this._onDidChangeTreeData.fire(void 0)}},P=new J;var o=require("vscode");async function Oe(i){let e="cachedProjects",n=i.workspaceState.get(e);if(n&&Date.now()-n.timestamp<3e5)return n.uris;let r=[];try{for(let l of ee)try{let g=await o.workspace.findFiles(l);r.push(...g)}catch(g){console.error(`Error scanning pattern ${l}: ${g}`),o.window.showWarningMessage(`Scan failed for ${l}`)}let p=Array.from(new Set(r.map(l=>l.fsPath))).map(l=>o.Uri.file(l));return await i.workspaceState.update(e,{uris:p,timestamp:Date.now()}),p}catch(p){return console.error(`Error in findProjectFiles: ${p}`),o.window.showWarningMessage("Failed to find projects. Check workspace permissions."),await i.workspaceState.update(e,void 0),[]}}async function L(i,e){try{let t=o.Uri.file(i);await o.workspace.fs.stat(t);let n=await o.workspace.openTextDocument(t);return await o.window.showTextDocument(n,{selection:new o.Range(e-1,0,e-1,0)}),!0}catch(t){return t instanceof o.FileSystemError&&t.code==="EntryNotFound"?o.window.showWarningMessage(`File not found: ${i}`):t instanceof Error?o.window.showErrorMessage(`Error opening ${i}: ${t.message}`):o.window.showErrorMessage(`Error opening ${i}: Unknown error`),!1}}function Ie(i){let e=o.commands.registerCommand(z,async()=>{let c=await Oe(i);if(c.length===0){o.window.showErrorMessage(te);return}let m=c.map(a=>a.fsPath);await i.globalState.update(F,m),await C.refresh(),await P.refresh(),o.window.showInformationMessage(`Scanned ${c.length} projects for DI registrations.`),console.log("Scan All Projects command executed.")}),t=o.commands.registerCommand(B,async()=>{console.log("DI Navigator: Clear Selection command executed."),await i.globalState.update(F,void 0),await C.refresh(),await P.refresh(),o.window.showInformationMessage(ie)}),n=o.commands.registerCommand(Z,async()=>{console.log("DI Navigator: Refresh Services command executed."),await C.refresh(),await P.refresh(),o.window.showInformationMessage(oe)}),r=o.commands.registerCommand("di-navigator.searchServices",async()=>{let c=C.getAllServices();if(!c.length){o.window.showInformationMessage("No DI services found.");return}let m=await o.window.showQuickPick(c.map(E=>({label:E.name,detail:`${E.registrations.length} registrations`,service:E})),{placeHolder:"Select a service to navigate to"});if(!m)return;let a=m.service.registrations[0];a&&await L(a.filePath,a.lineNumber)&&console.log(`Navigated to service ${m.service.name} at ${a.filePath}:${a.lineNumber}`)}),p=o.commands.registerCommand(A,async c=>{if(!c||c.registrations.length===0){o.window.showInformationMessage(re),console.log("Go to DI Implementation command executed: No registrations.");return}let m;if(c.registrations.length===1)m=c.registrations[0];else{let E=c.registrations.map(h=>({label:`${o.workspace.asRelativePath(o.Uri.file(h.filePath))}:${h.lineNumber}`,detail:h.filePath,registration:h})),v=await o.window.showQuickPick(E,{placeHolder:"Select implementation to navigate to",canPickMany:!1});if(!v){console.log("Go to DI Implementation command cancelled.");return}m=v.registration}let a=await L(m.filePath,m.lineNumber);console.log(a?`Go to DI Implementation command executed: ${m.filePath}:${m.lineNumber}`:"Go to DI Implementation command failed: Invalid file.")}),l=o.commands.registerCommand(M,async c=>{if(!c){o.window.showInformationMessage("No injection site selected."),console.log("Go to Injection Site command executed: No site provided.");return}let m=await L(c.filePath,c.lineNumber);console.log(m?`Go to Injection Site command executed: ${c.filePath}:${c.lineNumber}`:"Go to Injection Site command failed: Invalid file.")}),g=o.commands.registerCommand("di-navigator.resolveConflicts",async()=>{let c=C.getServiceGroups(),m=[];for(let E of c)for(let v of E.services)v.hasConflicts&&v.conflicts&&m.push(...v.conflicts.map(h=>({label:`${v.name}: ${h.type}`,detail:h.details,conflict:h,service:v})));if(m.length===0){o.window.showInformationMessage("No conflicts found in DI registrations.");return}let a=await o.window.showQuickPick(m,{placeHolder:"Select a conflict to resolve",canPickMany:!1});if(a){if(a.conflict.type==="DuplicateImplementation"){let E=["Navigate to first","Navigate to second","Remove duplicate (first)","Remove duplicate (second)","Cancel"],v=await o.window.showQuickPick(E,{placeHolder:"How to resolve?"});if(v&&v.includes("Remove")&&a.service.registrations.length>1){let h=a.service.registrations.filter(y=>y.implementationType===a.conflict.details.split(" ")[0]);if(h.length>1){let y=v.includes("first")?h[0]:h[1];if(await o.window.showQuickPick(["Yes, remove","No"],{placeHolder:"Confirm removal of registration at "+y.filePath+":"+y.lineNumber})==="Yes, remove"){try{let N=o.Uri.file(y.filePath),_=await o.workspace.openTextDocument(N),s=new o.Position(y.lineNumber-1,0),u=new o.Range(s,s),f=new o.WorkspaceEdit;f.insert(N,s,"// "),await o.workspace.applyEdit(f)?o.window.showInformationMessage(`Commented out duplicate registration at ${y.filePath}:${y.lineNumber}.`):o.window.showWarningMessage(`Failed to apply edit to ${y.filePath}.`)}catch(N){console.error("Error editing file:",N);let _=N instanceof Error?N.message:"Unknown error";o.window.showErrorMessage(`Failed to edit ${y.filePath}: ${_}`)}await C.refresh(),await P.refresh()}}}else if(v==="Navigate to first"||v==="Navigate to second"){let h=a.service.registrations[0];await L(h.filePath,h.lineNumber)}}else if(a.conflict.type==="MultipleImplementations"){let E=new Set(a.service.registrations.map(y=>y.implementationType)),v=Array.from(E),h=await o.window.showQuickPick(v,{placeHolder:"Select preferred implementation, others will be marked for removal"});h&&o.window.showInformationMessage(`Preferred impl: ${h}. Manually remove others.`)}else o.window.showInformationMessage(`Conflict "${a.conflict.type}": ${a.conflict.details}. Manual resolution recommended.`);console.log("Resolve Conflicts command executed.")}}),d=()=>{i.workspaceState.update("cachedProjects",void 0)},T=o.workspace.onDidChangeWorkspaceFolders(d);i.subscriptions.push(T),i.subscriptions.push(e,t,n,r,p,l,g),console.log("All DI Navigator commands registered successfully.")}function Ee(i){let t=w.workspace.getConfiguration($).get(G)||Array.from(i);return t.length>1?`{${t.join(",")}}`:t[0]}async function ye(){try{let i=Ee(R),e=await w.workspace.findFiles(D[0],i),t=await w.workspace.findFiles(D[1],i),n=await w.workspace.findFiles(D[2],i),r=await w.workspace.findFiles(D[3],i);return e.length>0||t.length>0||n.length>0||r.length>0}catch(i){return console.error("Error detecting .NET workspace:",i),!1}}async function Ae(i){console.log('Congratulations, your extension "di-navigator" is now active!'),C.setContext(i);let e=w.window.registerTreeDataProvider("diNavigator",P);i.subscriptions.push(e);let t=async()=>{let r=await ye();await w.commands.executeCommand("setContext",ce,r),r?(console.log(".NET workspace detected. Refreshing DI services."),w.window.withProgress({location:w.ProgressLocation.Notification,title:"DI Navigator: Scanning C# files",cancellable:!1},async p=>{await C.collectRegistrations(p),P.refresh()}).then(()=>{},p=>{console.error("Error during DI scan:",p),P.refresh()})):(console.log("Non-.NET workspace. Clearing DI analysis."),C.clearState(),P.refresh())};t().catch(r=>console.error("Error during initial workspace detection:",r));let n=Ee(R);D.forEach(r=>{let p=w.workspace.createFileSystemWatcher(r);p.onDidCreate(async()=>await t()),p.onDidDelete(async()=>await t()),p.onDidChange(async()=>await t()),i.subscriptions.push(p)}),Ie(i)}function Me(){C.clearState(),P.refresh()}0&&(module.exports={activate,deactivate,detectNetWorkspace});
